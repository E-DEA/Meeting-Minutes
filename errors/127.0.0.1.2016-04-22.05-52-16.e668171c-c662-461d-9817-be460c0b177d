(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'links' referenced before assignment"
p3
sS'layer'
p4
S'/home/hp/web2py/applications/MeetingMinutes/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nflag=2;\ndef index():\n    items_per_page=6\n    if len(request.args):\n        page=request.args[0]\n    else:\n        page=0\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    name = db(custom_auth_table.id==auth.user_id).select(custom_auth_table.Name)\n    query = db.Meetings.attendees.contains(name) or db.Meetings.minutetaker.contains(name)\n    rows=db(query).select(db.Meetings.ALL,limitby=limitby,orderby=~db.Meetings.id)\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    form=auth()\n    return dict(form=form)\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef minutes():\n    items_per_page=6\n    if len(request.args):\n        page=request.args[0]\n    else:\n        page=0\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    name = db(custom_auth_table.id==auth.user_id).select(custom_auth_table.Name)\n    query = db.Meetings.minutetaker.contains(name)\n    rows=db(query).select(db.Meetings.ALL,limitby=limitby,orderby=~db.Meetings.id)\n    return locals()\n\n@auth.requires_login()\ndef searchmeeting():\n    return dict(form=FORM(INPUT(_class=\'inputclass\',_id=\'keyword\',_placeholder=\'Search Other Meetings\',_name=\'keyword\',\n    _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\')")),\n    target_div=DIV(_id=\'target\'))\n\ndef callback():\n    """an ajax callback that returns a <ul> of links to wiki pages"""\n    query = db.Meetings.title.contains(request.vars.keyword) or db.Meetings.tags.contains(request.vars.keyword)\n    pages = db(query).select(orderby=~db.Meetings.dt)\n    links += [(A(p.title,_href=URL(\'show\',args=[p.id,\'Meeting\'])),XML(\' by<BR/>\'),A(p.organiser,_href=URL(\'show\',args=p.id))) for p in pages]\n    return DIV(*links)\n\ndef searchorg():\n    return dict(form=FORM(INPUT(_class=\'inputclass\',_id=\'keyword\',_placeholder=\'Search Organisations\',_name=\'keyword\',\n    _onkeyup="ajax(\'callback1\', [\'keyword\'], \'target\')")),\n    target_div=DIV(_id=\'target\'))\n\ndef callback1():\n    """an ajax callback that returns a <ul> of links to wiki pages"""\n    query = db.Organisation.name.contains(request.vars.keyword)\n    pages = db(query).select(orderby=db.Organisation.name)\n    if auth.user:\n        links = [A(p.name,_href=URL(\'show\',args=[p.id,\'Organisation\'])) for p in pages]\n    else:\n        links = [A(p.name) for p in pages]\n    return DIV(*links)\n\n@auth.requires_login()\ndef searchmymeeting():\n    return dict(form=FORM(INPUT(_class=\'inputclass\',_id=\'keyword\',_placeholder=\'Search My Meetings\',_name=\'keyword\',\n    _onkeyup="ajax(\'callback2\', [\'keyword\'], \'target\')")),\n    target_div=DIV(_id=\'target\'))\n\ndef callback2():\n    """an ajax callback that returns a <ul> of links to wiki pages"""\n    for meeting in db.Meetings:\n        for attendee in meeting.attendees.split(\',\'):\n            if attendee == auth.user.Name:\n                selected += meeting\n    selected += db(db.auth.user.Name==db.Meetings.minutetaker).select()\n    query = selected.title.contains(request.vars.keyword) or selected.tags.contains(request.vars.keyword)\n    pages = db(query).select(orderby=~db.Meetings.dt)\n    links = [(A(p.title,_href=URL(\'show\',args=p.id)),XML(\' by<BR/>\'),A(p.organiser,_href=URL(\'show\',args=p.id)),XML(\' on<BR/>\'),A(p.dt),XML(\'Tags:<BR/>\'),A(p.tags)) for p in pages]\n    return DIV(*links)\n\nresponse._vars=response._caller(callback)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/hp/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/hp/web2py/applications/MeetingMinutes/controllers/default.py", line 121, in <module>\n  File "/home/hp/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/hp/web2py/applications/MeetingMinutes/controllers/default.py", line 85, in callback\n    links += [(A(p.title,_href=URL(\'show\',args=[p.id,\'Meeting\'])),XML(\' by<BR/>\'),A(p.organiser,_href=URL(\'show\',args=p.id))) for p in pages]\nUnboundLocalError: local variable \'links\' referenced before assignment\n'
p11
s.